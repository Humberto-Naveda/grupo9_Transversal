/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vistas;

import entidades.*;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import persistencia.*;



public class inscripciones extends javax.swing.JFrame {
    
    private Menu_principal menu =new Menu_principal();
    private AlumnoData alumnoData = new AlumnoData(menu.conexionDb());
    private InscripcionData inscripcionData = new InscripcionData(menu.conexionDb());
    private DefaultTableModel modelo = new DefaultTableModel(){
        @Override
        public boolean isCellEditable(int f, int c) {  
        return false;
        }
    };
    private List<Alumno> listaAlumnos;
   
    public inscripciones() {
        initComponents();
        cargarAlumnos();
        armarCabecera();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        JCB_alumno = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        JCB_anio = new javax.swing.JComboBox<>();
        JRB_materiasInscriptas = new javax.swing.JRadioButton();
        JRB_materiasNoInscriptas = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        JT_tablaMaterias = new javax.swing.JTable();
        JB_inscribir = new javax.swing.JButton();
        JB_anular = new javax.swing.JButton();
        JB_salir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("FORMULARIO DE INSCRIPCION");

        jLabel2.setText("Seleccionar alumno :");

        JCB_alumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JCB_alumnoActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("MATERIAS");

        jLabel4.setText("AÃ±o de cursada : ");

        JCB_anio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2025", "2024", "2023", "2022" }));
        JCB_anio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JCB_anioActionPerformed(evt);
            }
        });

        JRB_materiasInscriptas.setText("Materas inscriptas");
        JRB_materiasInscriptas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRB_materiasInscriptasActionPerformed(evt);
            }
        });

        JRB_materiasNoInscriptas.setText("Materias no inscriptas");
        JRB_materiasNoInscriptas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRB_materiasNoInscriptasActionPerformed(evt);
            }
        });

        JT_tablaMaterias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(JT_tablaMaterias);

        JB_inscribir.setText("Inscribir");
        JB_inscribir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_inscribirActionPerformed(evt);
            }
        });

        JB_anular.setText("Anular inscripcion");
        JB_anular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_anularActionPerformed(evt);
            }
        });

        JB_salir.setText("Salir");
        JB_salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_salirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(262, 262, 262)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(71, 71, 71)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(JCB_alumno, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(JCB_anio, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(JB_inscribir)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(JB_anular)
                                    .addGap(86, 86, 86)
                                    .addComponent(JB_salir))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(JRB_materiasInscriptas, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(89, 89, 89)
                                        .addComponent(JRB_materiasNoInscriptas, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(41, 41, 41))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(94, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(JCB_alumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(JCB_anio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JRB_materiasInscriptas)
                    .addComponent(JRB_materiasNoInscriptas))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JB_inscribir)
                    .addComponent(JB_anular)
                    .addComponent(JB_salir))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JB_salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_salirActionPerformed
       dispose();
    }//GEN-LAST:event_JB_salirActionPerformed

    private void JRB_materiasInscriptasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRB_materiasInscriptasActionPerformed
        //Materias inscriptas
        JRB_materiasNoInscriptas.setSelected(false);
        Alumno alumnoSeleccionado = getAlumnoSeleccionado();
        int anio = Integer.parseInt((String) JCB_anio.getSelectedItem());
        List<Materia> materiasCursadas = inscripcionData.obtenerMateriasCursadas(alumnoSeleccionado.getIdAlumno(),anio);
        borrarFilasTabla();
        cargarDatosTabla(materiasCursadas);
    }//GEN-LAST:event_JRB_materiasInscriptasActionPerformed

    private void JRB_materiasNoInscriptasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRB_materiasNoInscriptasActionPerformed
        //Materias NO inscriptas
        JRB_materiasInscriptas.setSelected(false);
        Alumno alumnoSeleccionado = getAlumnoSeleccionado();
        int anio = Integer.parseInt((String) JCB_anio.getSelectedItem());
        List<Materia> materiasNoCursadas = inscripcionData.obtenerMateriasNoCursadas(alumnoSeleccionado.getIdAlumno(),anio);
        borrarFilasTabla();
        cargarDatosTabla(materiasNoCursadas);
    }//GEN-LAST:event_JRB_materiasNoInscriptasActionPerformed

    private void JCB_alumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCB_alumnoActionPerformed
        JRB_materiasNoInscriptas.setSelected(false);
        JRB_materiasInscriptas.setSelected(false);
        borrarFilasTabla();
    }//GEN-LAST:event_JCB_alumnoActionPerformed

    private void JB_inscribirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_inscribirActionPerformed
         if(JRB_materiasInscriptas.isSelected()){
            JOptionPane.showMessageDialog(null, "Materia ya inscripta, Selecione una materia no inscripta");
            return;
        }

        // Tomamos la materia
        Inscripcion inscripcion = new Inscripcion();
        Alumno alumno = getAlumnoSeleccionado();
        Materia materia = new Materia();
        
        int filaSelecionada = JT_tablaMaterias.getSelectedRow();
        
        if (filaSelecionada != -1){
            materia.setIdMateria( (Integer) modelo.getValueAt(filaSelecionada, 0) );
        }else{
            JOptionPane.showMessageDialog(null, "Seleccione una materia primero");
            return;
        }
        
        inscripcion.setEstado(true);
        inscripcion.setNota(-1);
        inscripcion.setAlumno(alumno);
        inscripcion.setMateria(materia);
        int anio = Integer.parseInt((String) JCB_anio.getSelectedItem());
        inscripcion.setAnio(anio);
        inscripcionData.guardarInscripcion( inscripcion );
        
        // Actualizamos la lista
        JRB_materiasNoInscriptasActionPerformed(evt);
    }//GEN-LAST:event_JB_inscribirActionPerformed

    private void JB_anularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_anularActionPerformed
        if(JRB_materiasNoInscriptas.isSelected()){
            JOptionPane.showMessageDialog(null, "Materia no inscripta, Selecione una materia inscripta");
            return;
        }
        
        int filaSelecionada = JT_tablaMaterias.getSelectedRow();
        int idMateria = -1;
        
        if (filaSelecionada != -1){
            idMateria = (Integer) modelo.getValueAt(filaSelecionada, 0);
        }else{
            JOptionPane.showMessageDialog(null, "Seleccione una materia primero");
            return;
        }
        
        Alumno alumno = getAlumnoSeleccionado();
        
        inscripcionData.borrarInscripcionMateriaAlumno(alumno.getIdAlumno(), idMateria);
        
        // Actualizamos la lista
        JRB_materiasInscriptasActionPerformed(evt);
    }//GEN-LAST:event_JB_anularActionPerformed

    private void JCB_anioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCB_anioActionPerformed
        JRB_materiasNoInscriptas.setSelected(false);
        JRB_materiasInscriptas.setSelected(false);
        borrarFilasTabla();
    }//GEN-LAST:event_JCB_anioActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(inscripciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(inscripciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(inscripciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(inscripciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new inscripciones().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JB_anular;
    private javax.swing.JButton JB_inscribir;
    private javax.swing.JButton JB_salir;
    private javax.swing.JComboBox<String> JCB_alumno;
    private javax.swing.JComboBox<String> JCB_anio;
    private javax.swing.JRadioButton JRB_materiasInscriptas;
    private javax.swing.JRadioButton JRB_materiasNoInscriptas;
    private javax.swing.JTable JT_tablaMaterias;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    private void cargarAlumnos() {
    listaAlumnos = alumnoData.listarAlumnos();
    /* se lo trasforma en String porque no se como se hace 
       el cambio de String a objeto
    */
    String[] alumnosStr = new String[listaAlumnos.size()];

        for (int i = 0; i < listaAlumnos.size(); i++) {
             Alumno a = listaAlumnos.get(i);
             // Formato que se mostrarÃ¡ en el combo
             alumnosStr[i] = a.getApellido() + ", " + a.getNombre() + " (DNI: " + a.getDni() + ")";
          }

          JCB_alumno.setModel(new DefaultComboBoxModel<>(alumnosStr));
    }
    
    private void armarCabecera() {
        //de la tabla
        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("Semestre");
        JT_tablaMaterias.setModel(modelo);
    }
    
    private void cargarDatosTabla(List<Materia> materias) {
        //de la tabla
        for (Materia materia : materias) {
            modelo.addRow(new Object[]{materia.getIdMateria(), materia.getNombre(), materia.getAnio()});
        }
    }
    
     private void borrarFilasTabla() {
        //para borrar las filas cada vez que selecciono un alumno diferente, elijo mostrar materias cursadas o no cursadas
        try {
            int filas = JT_tablaMaterias.getRowCount() - 1;
            for (; filas >= 0; filas--) {
                modelo.removeRow(filas);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al borrar filas" + e.getMessage(),"ERROR_MESSAGE",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private Alumno getAlumnoSeleccionado() {
        int index = JCB_alumno.getSelectedIndex();
        if (index != -1) {
            return listaAlumnos.get(index);
        }
        return null;
    } 
}
